Pr√©paration Exam Hardware & Software

***01 : Git***


    What is a revision control system and why is git so widespread?

Revision control system is a system that tracks changes to a file over time, for version history management, and you can recall a previous version or previous states. 


    What is the usefulness of git rebase and git rebase -i?
    
git rebase integrates changes from one branch into another by rewriting commit history.

git rebase -i to edit it.

    When and why would you want to git blame?

Used to find who last modified specific lines in a file. So that, you cand find who modified what,etc...

    What is a remote repository and what are the usual data transports for it?
    
A remote repository is a version-controlled project stored on a server, this can be used for multiple users.

The usual data transports for it is HTTPS, SSH and Git protocols

    How would you send a patch by email to a project maintainer?
    
Using git format-pach and git send-email

***02/03/05/06 : C language and ELF***


    What does -ffreestanding mean?
    
-ffreestanding is a compiler flag that tells the compiler to assume that the program is running in a freestanding environment, meaning that doesn't rely on standard libraries like the usual main() entry point.

By adding -freestandsting, we claim the code will not be hosted in a standard POSIX environment, and thus no such checks or optimizations can be performed. 
git log -S "freestandinga" 

    What are the all and clean targets in Makefile?

all : A default target that specifies what should be built when the make command is run without arguments.

clean : A target to remove intermediate or generated files, helps to clean up the workspace.

    This commit simply adds the rules to Makefile, to avoid calling
    compilation steps by hand.
    
    The "clean" target is a standard one, you "make clean" to get rid
    of build output.  Obviously, we have "git clean" too, but this is
    more recent and subtly different.
    
    In addition to "clean", another common target in Makefiles is "all".
    Moreover, if you call "make" with no arguments, it m akes the first
    target by default.  Thus, it's a good practice to have "all" as a target,
    and place it as the first target in Makefile.
    
    Actually, I have a mate whose fingers type "make all" by default, when
    not connected to the brain; he once placed another target before "all"
    in his Makefile and I had issues (my own fingers type "make"
    automatically, with no arguments).

    What is reverse polish notation?

In this case, Operator follows operands, there is no parentheses.
And this is a mathematical notation where operators follow their operands (ex : 3 4 + instead of 3 + 4).
ex : 3 5 6 + 5 + = 3 and 16

    Why do we prefer a data structure in povacca to if/elseif?
    
 examples/05-povacca: use data structure
    
    This commit introduces a data structure, to reduce code duplication.
    Even if the total number of lines is increased, this is a step
    forward because each operation is now a separate function, so
    we get rid of the list of "if"s and adding a new operator is
    conceptually simpler.
    
    We use function pointers, please check carefully and get acquainted with
    this.
    
    Also the stack is something that is passed as argument, so the functions
    themselves do not depend on global data, and you could use them with
    any stack -- it's not uncommon for implementation to become complex
    over time, and only code that does not depend on global variables can
    be librarized.


    Why is a prefix preferred in any code/data symbol names?

To avoid naming conflicts.

examples/05-povacca: use pv_ prefix for everything
    
    As the program is getting bigger, we really need to extend use of
    the prefix to everything.
    
    This is very important for maintainability: when you look at source
    code, everything that is pv_something is known to be part of this
    project. Everything else is not -- but often each library
    uses its own prefix, so you can often tell at a first glance
    what is a data structure or function related to.

    What is the role of the make command?

The make command automates the build process by using a Makefile, it compiles code, manges dependencies, and ensures only updated files are recompiled. 
    
Automates building with defined rules which helps to build the tarhet output from source files by compilation and linking.

    What is $(wildcard) in the Makefile?
    
The function is used to list all files in the current directory that match a specific pattern.

    In Makefile I use the $(wildcard op-*.c) trick.  This means that
    I do not maintain a list of operation-related files, and just by
    dropping in a new op-something.c file, it will be built.
    
    Unfortunately, we still need a global array of operations, now in
    povacca.c, near main(), so adding a file will make it built but
    not integrated in the list of operators.
    
    What is a linker script?
    
A linker script controls how a program's sections are arranged in memory, it specifies memory layout, initializes symbols and defines how the linker combines object files into the final binary.
    
This is a file used by the linker to control how the final binary is created from object files. It defines many things such as Memory Layout, ...

    What is the role of bigobj.lds in povacca?
    
This is a linker script, that defines how the linker organizes a specific section of memory, in this case the .data section.

    povacca: use new bigobj.lds
    
    This adds a linker script.
    
    The file operations.o (a relocatable link of all op-*.o) is now
    built using bigobj.lds.
    
    All standard sections are handled normally: the linker coalesces all
    .text sections it finds in the input files into a big .text section in
    the output, and so on for .data, .bss and all others.
    
    But, additionally, we ask the linker to put all .oper sections that it
    finds in the input, inside the .data section of the output, with two
    new symbold before and after those .oper things: pv_first and pv_last.
    
    At this point, nobody is emitting data or code in a .oper section,
    so it has no visible effect, but if ou "nm povacca" you will see the
    pv_first an pv_last symbols.


    What is an ELF section?

This is an Executable and Linkable Format, used in commpiled programs. Sections organize code and data within the binary and provide the linker and loader with information on how to handle these elements. (.text, .data, .bss, .rodata, .symtab, .debug)

    Explain the role of __attribute__((section(".oper"))).

Tells to the compiler to place a specific variable or function into a custom ELF section named .oper.

***07 : Development system and cross-compilation***


    What is the role of the used attribute?
    
The used attribute ensures that a variable or function is included in the final binary, even if it appears unused in the source code. 

A COMPLETER

    What is arm-none-eabi-gcc?
    
This is a specialized version of the GCC cross-compiler, for ARM mictrocontrollers, generating binaries for no OS systems.

    Why do we use CROSS_COMPILE in the Makefile?

Specifies cross-compiler prefix and ensures the correct compiler is used for building code intended for ARM rather than the host machine.

    What is qemu-system-arm, that we use to run vello?
    
A QEMU emulator that simulates ARM hardware to test ARM-based binaries on a PC.

    What is the effect of declaring static a function?
    
Restricts the function's scope to the file it is declared in, preventing access from other files.

ex : 

//file1.c

static void myFunction(){
//This function is only accessible in file1.c
}

//file2.c
void callFunction(){
myFunction(); // ERROR : not accessible in file2.c
}

    How does static interact with the optimizer?
    
static limits a function's visibility to its file and allowing the compiler to optimize it more effectively.

A COMPLETER 

    What are the sections in the versatile.lds script?
    
SECTIONS defines how the program's various parts are place in memory.

Also there is :

.text where CPU executes instructions
.rodata storing data separate from writable memory
.data store variables that need to retain values across function calls.
.bss Allocates zeroed memory space for these variables at runtime

***08 : ARM Processor***


    Why is "jiffies" ( or "_jiffies") defined in the linker script?
    
jiffies is mapped to a specific hardware timer address via the linker script for precise timekeeping.

    Why is the stack laid out at the beginning of RAM?
    
The stack is placed at the start of RAM because of how it grows and interacts with other memory sections. In most architectures, the stack grows downward from higher memory addresses to lower ones and placing the stack at the start of RAM ensures it grows without immediately colliding with other memory areas.

    How many registers have ARM processors, and what is their ABI role?
    
ARM processors have 16 registers (R0 - R15).
ABI (Application Binary Interface) defines how sofware components interact at the binary level. 
RO to R3 : Function arguments and return values
R4 to R11 : Local variables
R12 : Temporary
R13 : Stack pointer
R14 : Link Register for function return addresses
R15 : Program Counter for the next instruction

    What is the Link Register and how is it used?
    
The Link Register (LR) is a special-purpose register in ARM processors that stores the return address during a function call. When a function is called Link Register holds the address of the next instruction. 

A COMPLETER 

    What are the Thumb and Thumb2 instruction sets?
    
Thumb : A 16-bit compact instruction set that reduces code size. With 2-operand operations, only a subset of the registers can be accessed; and some "special" instructions are not supported.

Thumb-2 : Extends Thumb with both 16-bit and 32-bit instructions combining compact code size with near full ARM functionality.
Accesses all registers. 

***10 : Running binaries on real hardware***


    Why in putc do we need to wait for THRE to be empty?
    
The THRE (Transmit Holding Register Empty) flag ensures the UART buffer is ready to accept a new character, but in putc, waiting for HTRE prevents overwritng the buffer before the previous character is fully transmitted.

  sw/lib: io: wait for THRE to be empty
    
    This fixes the bug shown in the previous commit, by waiting for the
    THRE (transmit holding register empty) bit to be set in U0LSR (uart 0
    line status register).
    
    This should be obvious to anyone who reads the CPU manual, and you can't
    work on an embedded processor without reading the manual from page 1 to
    page END before you start coding.  This also applies to every component
    in your circuit -- possibly also resistors and capacitors.

    What tool is used to disassemble an ELF file and a binary?
    
ELF files : We can use objdump to disassemble and analyzed code sections.

Binary files : Use objdump with -b.

    Why did I write tdc-11-test as a microcontroller program?
    
Because the program interact with some hardware peripherals (GPIO, I2C, etc..) and it includes libraries to communicate with hardware interfaces.

    What is a relative label in assembly files?
    
A REVOIR

***11 : GPIO and time_before()*** 


    What is a GPIO pin?
    
A GPIO (General-Purpose Input/Output) pin is a hardware pin on a microcontroller that can be configured as an input or output.

    What is an "alternate function" for a GPIO pin?
    
An alternate function allows a GPIO pin to perform specialized roles, such as UART communication, SPI or PWM output, instead of a basic input/output. It enables the pin to connect to specific peripherals.
    
    Why is the gpio_dir_af() API a bad design choice?
    
A REVOIR
    
    Why do we define jiffies in the linker script?
    
jiffies is defined in the linker script to map it to a specific hardware timer address. This ensures accurate system-wide timekeeping and avoids hardcoding the address in the source code.

    Explain time_before() and its variations
    
The time_before() function in many operation systems is used to compare two values, typically jiffies and j. It evaluates one value before another in terms of time. 

There is some variations : 

time_after() : check if one value is after another.
time_before_eq() : check if one value is before or equal to another
time_after_eq : check if one value is after or equal to another

***12 : PCB design***


    What is a component and what is a footprint, in EDA?
    
A component represents the logical symbol of an electronic part used in the schematic design. 

A footprint, on the other hand, defines the physical layout of the component on the PCB, including pads, dimensions, and placement for soldering. 

    What are "gerber files" and what are they used for?
    
Gerber files are the file formats used in PCB manufacturing. They contain information about the layers of a PCB design.

    What is the common workflow in PCB design?
    
Firstly, you need to design the electronic schematic of the card, but, before, you need to know what the client need on his electronic card.
Secondly, you need to layout the PCB (routing and arrange components).
Finally, generate the Gerber files and send them for fabrication.

    Why should you place all pin strips in a 2.54mm grid?
    
Because, 2.54mm is the standard connections for all connectors.

    Why should we read all data sheets from page 1 to page end?
    
It's important for understanding all the component's specifications, capabilities and limitations. Sometimes, the manufacturer can also give tips to make the electronic schematic.

***13 : udelay, neopixels, flash programming*** 

    Why is udelay important and why we should avoid delay(howmuch)
    
A COMPLETER

    What are .rep and .repr and why are they used in udelay()?
    
A COMPLETER

    Explain what are the vectors in cortex-M
    
A COMPLETER
    
    Why are vectors declared in boot.S
    
Vectors are de
    
    boot.S: support flash programming
    
    This major overhaul of boot.S supports programming to flash
    memory.  There are the following changes:
    
      * We add .vectors section (and "vetors" label, for convenience).
      The first vector is the stack pointer, and the second vector is
      the entry point. This is a thumb CPU, so the entry point must be odd.
    
      * We reserve some space in the vector table

    Explain .text.ramboot and .text.romboot
    What is the problem in reading two counter registers, and how can we solve it?

***14 : printf, stack overflow***


    Why is printf included in source code and not from libc?
    Why does pp_printf offer several implementations?
    What does PROVIDE mean in the linker script?
    What is the role of __attribute__((format(printf)))?
    Why are we pre-filling the stack in boot.S?

***15 : Kconfig*** 

    What are the input and output files of a Kconfig-based configuration system?
    Explain the use of obj-y and LDS-y in Makefile.

***16 : PLL and udelay***


    What is the PLL in a microcontroller?
    How can we check whether our PLL code works in changing CPU frequency?
    Why do we calibrate for udelay?
    Why is a 64-bit multiplication preferred over a 32-bit division?
    What is __attribute__((noinline)) and why do we use it?

***18 : reflections and timestamping***

    Why is jiffies expected to be a #define'd value in some situations?
    Why do we need pollc and polls in addition to getc and gets?
    Explain why commands rely on a data structure.
    Describe the tagged mechanism in command-response systems.
    What is errno.h used for?
    What is the problem of split-counter timestamping and how is it solved?
    Why does the inline asm construct list input and output registers?

***19 : scheduling theory*** 

    Describe quickly the RM and EDF schedulers.
    What are the release time and deadline of a task?
    What are __task_first and __task_last in the linker script?
    What is the role of each field in struct task?
    What is __builtin_constant_p() and what is it used for?
    Why do we check at build time for known run-time issues?
    What is a backround server and why it is risky in non-preemptive systems?
    What are the advantages of fsm-based tasks as opposed to the standard single-function implementation?
    Why do we work-around scheduling issues instead of calling panic()?
    What is the usefulness of a counter of errors if no code reads it?
    
***21 : buses***


    Briefly describe I2C.
    Briefly describe SPI.
    Briefly describe what a UART is.
    What is the main physical difference between I2C and SPI?
    How can I drive an arbitrary bit stream up to a few megabits per second on a microcontroller pin?



